package com.guangda.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import greendao.Users;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table Users.
*/
public class UsersDao extends AbstractDao<Users, Long> {

    public static final String TABLENAME = "Users";

    /**
     * Properties of entity Users.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property USex = new Property(1, String.class, "uSex", false, "U_SEX");
        public final static Property UTelphone = new Property(2, String.class, "uTelphone", false, "U_TELPHONE");
        public final static Property UAge = new Property(3, String.class, "uAge", false, "U_AGE");
        public final static Property UName = new Property(4, String.class, "uName", false, "U_NAME");
        public final static Property UPwd = new Property(5, String.class, "uPwd", false, "U_PWD");
    };


    public UsersDao(DaoConfig config) {
        super(config);
    }
    
    public UsersDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'Users' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'U_SEX' TEXT," + // 1: uSex
                "'U_TELPHONE' TEXT," + // 2: uTelphone
                "'U_AGE' TEXT," + // 3: uAge
                "'U_NAME' TEXT," + // 4: uName
                "'U_PWD' TEXT);"); // 5: uPwd
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'Users'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Users entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String uSex = entity.getUSex();
        if (uSex != null) {
            stmt.bindString(2, uSex);
        }
 
        String uTelphone = entity.getUTelphone();
        if (uTelphone != null) {
            stmt.bindString(3, uTelphone);
        }
 
        String uAge = entity.getUAge();
        if (uAge != null) {
            stmt.bindString(4, uAge);
        }
 
        String uName = entity.getUName();
        if (uName != null) {
            stmt.bindString(5, uName);
        }
 
        String uPwd = entity.getUPwd();
        if (uPwd != null) {
            stmt.bindString(6, uPwd);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Users readEntity(Cursor cursor, int offset) {
        Users entity = new Users( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // uSex
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // uTelphone
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // uAge
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // uName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // uPwd
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Users entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUSex(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUTelphone(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUAge(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUPwd(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Users entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Users entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
